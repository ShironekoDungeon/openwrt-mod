diff -Naur a/clients.c b/clients.c
--- a/clients.c	2017-05-17 20:55:17.000000000 +0000
+++ b/clients.c	2017-08-02 01:05:23.475694563 +0000
@@ -114,7 +114,7 @@
 
 	/* User-Agent: IPI/1.0 UPnP/1.0 DLNADOC/1.50 */
 	{ ENetFrontLivingConnect,
-	  FLAG_DLNA | FLAG_FORCE_SORT | FLAG_CAPTION_RES,
+	  FLAG_DLNA | FLAG_FORCE_SORT | FLAG_CAPTION_RES | FLAG_MULTI_CAPTION_RES,
 	  "NetFront Living Connect",
 	  "IPI/1",
 	  EUserAgent
@@ -162,7 +162,7 @@
 
 	/* User-Agent: Linux/2.6.31-1.0 UPnP/1.0 DLNADOC/1.50 INTEL_NMPR/2.0 LGE_DLNA_SDK/1.5.0 */
 	{ ELGDevice,
-	  FLAG_DLNA | FLAG_CAPTION_RES,
+	  FLAG_DLNA | FLAG_CAPTION_RES | FLAG_MULTI_CAPTION_RES,
 	  "LG",
 	  "LGE_DLNA_SDK",
 	  EUserAgent
@@ -241,14 +241,14 @@
 	},
 
 	{ EAsusOPlay,
-	  FLAG_DLNA | FLAG_MIME_AVI_AVI | FLAG_CAPTION_RES,
+	  FLAG_DLNA | FLAG_MIME_AVI_AVI | FLAG_CAPTION_RES | FLAG_MULTI_CAPTION_RES,
 	  "Asus OPlay Mini/Mini+",
 	  "O!Play",
 	  EUserAgent
 	},
 
 	{ EBubbleUPnP,
-	  FLAG_CAPTION_RES,
+	  FLAG_CAPTION_RES | FLAG_MULTI_CAPTION_RES,
 	  "BubbleUPnP",
 	  "BubbleUPnP",
 	  EUserAgent
diff -Naur a/clients.h b/clients.h
--- a/clients.h	2017-05-17 20:55:17.000000000 +0000
+++ b/clients.h	2017-08-02 01:10:30.000000000 +0000
@@ -37,6 +37,7 @@
 #define FLAG_AUDIO_ONLY         0x00000400
 #define FLAG_FORCE_SORT         0x00000800
 #define FLAG_CAPTION_RES        0x00001000
+#define FLAG_MULTI_CAPTION_RES  0x00002000
 #define FLAG_SKIP_DLNA_PN       0x00002000 /* during browsing */
 /* Response-related flags */
 #define FLAG_HAS_CAPTIONS       0x80000000
diff -Naur a/metadata.c b/metadata.c
--- a/metadata.c	2017-05-17 20:55:17.000000000 +0000
+++ b/metadata.c	2017-08-02 01:09:53.000000000 +0000
@@ -56,6 +56,12 @@
 #define FLAG_DURATION	0x00000200
 #define FLAG_RESOLUTION	0x00000400
 
+#if SCANDIR_CONST
+typedef const struct dirent scan_filter;
+#else
+typedef struct dirent scan_filter;
+#endif
+
 /* Audio profile flags */
 enum audio_profiles {
 	PROFILE_AUDIO_UNKNOWN,
@@ -115,45 +121,68 @@
 	return 0;
 }
 
+static int
+filter_caption(scan_filter *d)
+{
+  return (d->d_name[0] != '.' && is_caption(d->d_name));
+}
+
 void
 check_for_captions(const char *path, int64_t detailID)
 {
-	char file[MAXPATHLEN];
-	char *p;
-	int ret;
-
-	strncpyt(file, path, sizeof(file));
-	p = strip_ext(file);
-	if (!p)
-		p = strrchr(file, '\0');
-
-	/* If we weren't given a detail ID, look for one. */
+	struct dirent **namelist = NULL;
+	struct stat st;
+	int i, n, subid = 1, fsiz;
+	char *p, *dir, *name, *fbase, buf[PATH_MAX], full_path[PATH_MAX];
+  /* from inotify */
 	if (!detailID)
 	{
-		detailID = sql_get_int64_field(db, "SELECT ID from DETAILS where (PATH > '%q.' and PATH <= '%q.z')"
-		                            " and MIME glob 'video/*' limit 1", file, file);
-		if (detailID <= 0)
-		{
-			//DPRINTF(E_MAXDEBUG, L_METADATA, "No file found for caption %s.\n", path);
+		if (sql_get_int_field(db, "SELECT 1 FROM captions WHERE path = %Q", path) == 1)
 			return;
+		strcpy(buf, path);
+		for (i = 0; i < 2 && !detailID; i++)
+		{
+			p = strip_ext(buf);
+			if (!p)
+				break;
+			detailID = sql_get_int64_field(db, "SELECT id FROM details WHERE (path > '%q.' AND path <= '%q.z') AND mime like 'video/%%' LIMIT 1", buf);
 		}
+		if (detailID)
+		{
+			subid = sql_get_int_field(db, "SELECT MAX(sub_id) FROM captions WHERE detail_id = %lld", detailID);
+			if (subid < 1)
+				subid = 1;
+			else	
+				subid++;
+			DPRINTF(E_DEBUG, L_METADATA, "Caption found [%lld,%d] %s\n", (long long) detailID, subid, path);
+			sql_exec(db, "INSERT INTO captions (detail_id, sub_id, path) VALUES (%lld, %d, %Q)", (long long) detailID, subid, path);
+		}
+		return;
 	}
-
-	strcpy(p, ".srt");
-	ret = access(file, R_OK);
-	if (ret != 0)
-	{
-		strcpy(p, ".smi");
-		ret = access(file, R_OK);
-	}
-
-	if (ret == 0)
+  /* from scanner */
+	strcpy(buf, path);
+	fbase = basename(buf);
+	p = strip_ext(fbase);
+	if (!p)
+		p = strrchr(fbase, '\0');
+	fsiz = strlen(fbase);
+	dir = dirname(buf);
+	n = scandir(dir, &namelist, filter_caption, alphasort);
+	for (i = 0; i < n; i++)
 	{
-		sql_exec(db, "INSERT OR REPLACE into CAPTIONS"
-		             " (ID, PATH) "
-		             "VALUES"
-		             " (%lld, %Q)", detailID, file);
+		name = namelist[i]->d_name;
+		if (strncmp(fbase, name, fsiz) == 0)
+		{
+			snprintf(full_path, PATH_MAX, "%s/%s", dir, name);
+			if (stat(full_path, &st) == 0)
+			{
+				DPRINTF(E_DEBUG, L_METADATA, "Caption found [%lld,%d] %s\n", (long long) detailID, subid, full_path);
+				sql_exec(db, "INSERT INTO captions (detail_id, sub_id, path) VALUES (%lld, %d, %Q)", (long long) detailID, subid++, full_path); 
+			}
+		}
+		free(namelist[i]);
 	}
+	free(namelist);
 }
 
 void
diff -Naur a/monitor.c b/monitor.c
--- a/inotify.c 2017-05-17 20:55:17.000000000 +0000
+++ b/inotify.c	2017-08-02 01:05:32.565604572 +0000
@@ -602,6 +602,7 @@
 		/* Now delete the actual objects */
 		sql_exec(db, "DELETE from DETAILS where ID = %lld", detailID);
 		sql_exec(db, "DELETE from OBJECTS where DETAIL_ID = %lld", detailID);
+		sql_exec(db, "DELETE from CAPTIONS where DETAIL_ID = %lld", detailID);
 	}
 	snprintf(art_cache, sizeof(art_cache), "%s/art_cache%s", db_path, path);
 	remove(art_cache);
@@ -633,6 +634,7 @@
 				detailID = strtoll(result[i], NULL, 10);
 				sql_exec(db, "DELETE from DETAILS where ID = %lld", detailID);
 				sql_exec(db, "DELETE from OBJECTS where DETAIL_ID = %lld", detailID);
+		    sql_exec(db, "DELETE from CAPTIONS where DETAIL_ID = %lld", detailID);
 			}
 			ret = 0;
 		}
diff -Naur a/scanner_sqlite.h b/scanner_sqlite.h
--- a/scanner_sqlite.h	2017-05-17 20:55:17.000000000 +0000
+++ b/scanner_sqlite.h	2017-08-02 01:05:32.565604572 +0000
@@ -64,7 +64,8 @@
 					");";
 
 char create_captionTable_sqlite[] = "CREATE TABLE CAPTIONS ("
-					"ID INTEGER PRIMARY KEY, "
+					"DETAIL_ID INTEGER, "
+					"SUB_ID INTEGER, "
 					"PATH TEXT NOT NULL"
 					");";
 
diff -Naur a/upnphttp.c b/upnphttp.c
--- a/upnphttp.c	2017-05-17 20:55:17.000000000 +0000
+++ b/upnphttp.c	2017-08-02 01:05:32.565604572 +0000
@@ -1222,7 +1222,7 @@
 SendResp_upnphttp(struct upnphttp * h)
 {
 	int n;
-	DPRINTF(E_DEBUG, L_HTTP, "HTTP RESPONSE: %.*s\n", h->res_buflen, h->res_buf);
+  DPRINTF(E_DEBUG, L_HTTP, "HTTP RESPONSE: %.*s\n", h->res_buflen, h->res_buf);
 	n = send(h->socket, h->res_buf, h->res_buflen, 0);
 	if(n<0)
 	{
@@ -1500,17 +1500,25 @@
 	long long id;
 	int fd;
 	struct string_s str;
-
+	char *p;
+	int subid = 0;
 	id = strtoll(object, NULL, 10);
 
-	path = sql_get_text_field(db, "SELECT PATH from CAPTIONS where ID = %lld", id);
+	p = strrchr(object, '-');
+	if (p)
+		subid = atoi(p+1);
+
+  if (subid)
+    path = sql_get_text_field(db, "SELECT path FROM captions WHERE detail_id = %lld AND sub_id = %d;", id, subid);
+  else
+    path = sql_get_text_field(db, "SELECT path FROM captions WHERE detail_id = %lld ORDER BY LENGTH(path) ASC LIMIT 1;", id);
 	if( !path )
 	{
 		DPRINTF(E_WARN, L_HTTP, "CAPTION ID %s not found, responding ERROR 404\n", object);
 		Send404(h);
 		return;
 	}
-	DPRINTF(E_INFO, L_HTTP, "Serving caption ID: %lld [%s]\n", id, path);
+	DPRINTF(E_INFO, L_HTTP, "Serving caption ID: [%lld,%d] [%s]\n", id, subid, path);
 
 	fd = _open_file(path);
 	if( fd < 0 ) {
@@ -2040,7 +2048,7 @@
 
 	if( h->reqflags & FLAG_CAPTION )
 	{
-		if( sql_get_int_field(db, "SELECT ID from CAPTIONS where ID = '%lld'", (long long)id) > 0 )
+		if( sql_get_int_field(db, "SELECT 1 FROM captions WHERE detail_id = '%lld' LIMIT 1", (long long) id) == 1 )
 			strcatf(&str, "CaptionInfo.sec: http://%s:%d/Captions/%lld.srt\r\n",
 			              lan_addr[h->iface].str, runtime_vars.port, (long long)id);
 	}
diff -Naur a/upnpsoap.c b/upnpsoap.c
--- a/upnpsoap.c	2017-05-17 20:55:17.000000000 +0000
+++ b/upnpsoap.c	2017-08-02 01:05:32.565604572 +0000
@@ -678,6 +678,32 @@
 	return order;
 }
 
+static void
+add_captions_res(struct string_s *str, const char *attr, const char *addr, int port, const char *detailID)
+{
+	char **results = NULL, *sql = NULL;
+	int i, r, rows, cols;
+
+	sql = sqlite3_mprintf("SELECT sub_id, path FROM captions WHERE detail_id = %Q;", detailID);
+	
+	r = sql_get_table(db, sql, &results, &rows, &cols);
+	if (r != SQLITE_OK)
+		goto error;
+
+	for (i = 2; i <= (rows * cols); i += 2)
+	{
+		if (i == 2)
+			strcatf(str, attr, addr, port, detailID, "", "");
+		else
+			strcatf(str, attr, addr, port, detailID, "-", results[i]);
+	}
+error:
+	if (sql)
+		sqlite3_free(sql);
+	if (results)
+		sqlite3_free_table(results);
+}
+
 inline static void
 add_resized_res(int srcw, int srch, int reqw, int reqh, char *dlna_pn,
                 char *detailID, struct Response *args)
@@ -870,10 +896,10 @@
 					strcpy(mime+6, "mpeg");
 				}
 			}
-			if( (passed_args->flags & FLAG_CAPTION_RES) ||
+			if( (passed_args->flags & (FLAG_CAPTION_RES|FLAG_MULTI_CAPTION_RES)) ||
 			    (passed_args->filter & (FILTER_SEC_CAPTION_INFO_EX|FILTER_PV_SUBTITLE)) )
 			{
-				if( sql_get_int_field(db, "SELECT ID from CAPTIONS where ID = '%s'", detailID) > 0 )
+				if( sql_get_int_field(db, "SELECT 1 from CAPTIONS where DETAIL_ID = %Q;", detailID) == 1 )
 					passed_args->flags |= FLAG_HAS_CAPTIONS;
 			}
 			/* From what I read, Samsung TV's expect a [wrong] MIME type of x-mkv. */
@@ -1103,7 +1129,9 @@
 				default:
 					if( passed_args->flags & FLAG_HAS_CAPTIONS )
 					{
-						if( passed_args->flags & FLAG_CAPTION_RES )
+						if( passed_args->flags & FLAG_MULTI_CAPTION_RES )
+							add_captions_res(str, "&lt;res protocolInfo=\"http-get:*:text/srt:*\"&gt;http://%s:%d/Captions/%s%s%s.srt&lt;/res&gt;", lan_addr[passed_args->iface].str, runtime_vars.port, detailID);
+						else if( passed_args->flags & FLAG_CAPTION_RES )
 							ret = strcatf(str, "&lt;res protocolInfo=\"http-get:*:text/srt:*\"&gt;"
 									     "http://%s:%d/Captions/%s.srt"
 									   "&lt;/res&gt;",
diff -Naur a/utils.c b/utils.c
--- a/utils.c	2017-05-17 20:55:17.000000000 +0000
+++ b/utils.c	2017-08-02 01:05:32.565604572 +0000
@@ -430,7 +430,8 @@
 int
 is_caption(const char * file)
 {
-	return (ends_with(file, ".srt") || ends_with(file, ".smi"));
+	return (ends_with(file, ".srt") || ends_with(file, ".smi") || ends_with(file, ".ass") || 
+		ends_with(file, ".ssa"));
 }
 
 int
